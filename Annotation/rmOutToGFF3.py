import argparse

def repeatmasker_out_to_gff(input_file, output_file):
    with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
        for line in infile:
            if line.startswith('*'):
                continue
            break

        for line in infile:
            fields = line.strip().split()
            if len(fields) < 15:
            query_seq = fields[4]
            query_start = fields[5]
            query_end = fields[6]
            strand = '+' if fields[8] == 'C' else '-'
            matching_repeat = fields[9]
            repeat_class_family = fields[10]
            attribute = f'ID={query_seq};Note={matching_repeat} {repeat_class_family};'
            source = '.'
            type_ = 'repeat_region'
            score = '.'
            phase = '.'
            gff_line = '\t'.join([query_seq, source, type_, query_start, query_end, score, strand, phase, attribute])
            outfile.write(gff_line + '\n')


if __name__ == "__main__":
    author_info = f"""
Author: Haoyu Wang
Date: Feb 12  2024
Affiliation: Southwest University
Contact: wanghyx666@163.com
    """
    parser = argparse.ArgumentParser(
        description="This script is used to convert the \".out\" file generated by RepeatMasker into a GFF3 format file.",
        epilog=author_info,
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('input_out', type=str, help='Path to the output file generated by RepeatMasker. This is a required parameter.')
    parser.add_argument('output_gff', type=str, help='Path to the output file in GFF3 format after conversion. This is a required parameter.')
    args = parser.parse_args()

    repeatmasker_out_to_gff(args.input_out, args.output_gff)
