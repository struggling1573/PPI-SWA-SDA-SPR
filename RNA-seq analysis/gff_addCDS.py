import argparse
import re

def convert_gff(input_file, output_file):
    with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
        for line in infile:
            if line.startswith("##"):
                outfile.write(line)
                continue
            fields = line.strip().split('\t')
            seqid = fields[0]
            source = fields[1]
            feature_type = fields[2]
            start = fields[3]
            end = fields[4]
            score = fields[5]
            strand = fields[6]
            frame = fields[7]
            attributes = fields[8]

            if feature_type == "gene":
                new_line = f"{seqid}\t{source}\t{feature_type}\t{start}\t{end}\t.\t{strand}\t{frame}\t{attributes}\n"
                outfile.write(new_line)
            elif feature_type == "transcript":
                new_feature_type = "mRNA"
                new_score = "0.01" 
                new_line = f"{seqid}\t{source}\t{new_feature_type}\t{start}\t{end}\t{new_score}\t{strand}\t{frame}\t{attributes}\n"
                outfile.write(new_line)
            elif feature_type == "exon":
                exon_id = re.search(r'ID=([^;]+);', attributes).group(1)
                parent_id = re.search(r'Parent=([^;]+);?', attributes).group(1)
                cds_id = exon_id.replace("exon", "cds")
                cds_attributes = f"ID={cds_id};Parent={parent_id}"
                cds_score = "0.01"
                cds_frame = "0"
                cds_line = f"{seqid}\t{source}\tCDS\t{start}\t{end}\t{cds_score}\t{strand}\t{cds_frame}\t{cds_attributes}\n"
                outfile.write(cds_line)
                new_line = f"{seqid}\t{source}\t{feature_type}\t{start}\t{end}\t.\t{strand}\t{frame}\t{attributes}\n"
                outfile.write(new_line)


def main():
    parser = argparse.ArgumentParser(
        description="Convert a GFF file generated by StringTie to a specific format. "
                    "This script changes 'transcript' to 'mRNA' and adds corresponding CDS information for each exon. ",
        epilog="Author: Haoyu Wang\n"
               "Date: May 23  2024\n"
               "Affiliation: Southwest University\n"
               "Contact: wanghyx666@163.com",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('-i', '--input', required=True, help='Input GFF file generated by StringTie')
    parser.add_argument('-o', '--output', required=True, help='Output GFF file in the desired format')
    args = parser.parse_args()

    convert_gff(args.input, args.output)


if __name__ == "__main__":
    main()
